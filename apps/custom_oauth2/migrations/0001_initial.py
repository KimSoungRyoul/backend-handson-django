# Generated by Django 4.2.4 on 2023-08-10 14:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_mysql.models
import oauth2_provider.generators
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="JWTAccessToken",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("token", models.CharField(max_length=255, unique=True)),
                ("expires", models.DateTimeField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RedisRefreshToken",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("token", models.CharField(max_length=255)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("revoked", models.DateTimeField(null=True)),
            ],
            options={
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RegisteredApplication",
            fields=[
                (
                    "post_logout_redirect_uris",
                    models.TextField(blank=True, help_text="Allowed Post Logout URIs list, space separated"),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.CharField(
                        db_index=True,
                        default=oauth2_provider.generators.generate_client_id,
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("redirect_uris", models.TextField(blank=True, help_text="Allowed URIs list, space separated")),
                (
                    "client_type",
                    models.CharField(choices=[("public", "퍼블릭"), ("confidential", "외부비공개")], max_length=32),
                ),
                (
                    "client_secret",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=oauth2_provider.generators.generate_client_secret,
                        max_length=255,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("skip_authorization", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "algorithm",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "No OIDC support"),
                            ("RS256", "RSA with SHA-2 256"),
                            ("HS256", "HMAC with SHA-2 256"),
                        ],
                        default="",
                        max_length=5,
                    ),
                ),
                (
                    "authorization_grant_type",
                    django_mysql.models.ListCharField(
                        models.CharField(
                            choices=[
                                ("refresh_token", "refresh토큰으로 Access토큰 재발급받는방식"),
                                ("authorization-code", "인증"),
                                ("implicit", "명시적"),
                                ("password", "비밀번호 인증"),
                                ("client-credentials", "클라 검증"),
                                ("openid-hybrid", "open id"),
                            ],
                            max_length=20,
                        ),
                        max_length=126,
                        size=6,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "pycon2023app_application",
            },
        ),
        migrations.CreateModel(
            name="IDToken",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("jti", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="JWT Token ID")),
                ("expires", models.DateTimeField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="id_token",
                        to=settings.OAUTH2_PROVIDER_APPLICATION_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="id_token",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "pycon2023app_id_token",
            },
        ),
        migrations.CreateModel(
            name="Grant",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("code", models.CharField(max_length=255, unique=True)),
                ("expires", models.DateTimeField()),
                ("redirect_uri", models.TextField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("code_challenge", models.CharField(blank=True, default="", max_length=128)),
                (
                    "code_challenge_method",
                    models.CharField(
                        blank=True, choices=[("plain", "plain"), ("S256", "S256")], default="", max_length=10
                    ),
                ),
                ("nonce", models.CharField(blank=True, default="", max_length=255)),
                ("claims", models.TextField(blank=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grants",
                        to=settings.OAUTH2_PROVIDER_APPLICATION_MODEL,
                    ),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "db_table": "pycon2023app_grant",
            },
        ),
    ]

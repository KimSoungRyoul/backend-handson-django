openapi: 3.0.3
info:
  title: drf-spectacular API Document
  version: 1.0.0
  description: '### i am description'
  contact:
    name: 김성렬
    url: http://www.example.com/support
    email: KimSoungRyoul@gmail.com
  license:
    name: MIT License
    url: https://github.com/KimSoungRyoul/DjangoBackendProgramming/blob/main/LICENSE
paths:
  /api/django-model/:
    get:
      operationId: apiDjangoModelRetrieve
      description: ''
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: apiDjangoModelCreate
      description: ''
      summary: '23232323'
      tags:
      - 사용자
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Django2Model'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Django2Model'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Django2Model'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          description: No response body
  /api/django-model/{id}/:
    get:
      operationId: apiDjangoModelRetrieve2
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: apiDjangoModelUpdate
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: apiDjangoModelPartialUpdate
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: apiDjangoModelDestroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: apiUsersList
      description: ''
      summary: 이런식으로 class레벨 데코레이터로 문서 커스터마이징 가능하다.
      tags:
      - 사용자
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: apiUsersCreate
      description: ''
      summary: method레벨 데코레이터도 가능
      parameters:
      - in: query
        name: a_param
        schema:
          type: string
        description: QueryParam1 입니다.
      - in: query
        name: date_param
        schema:
          type: string
          format: date
        description: Filter by release date
        examples:
          이것은QueryParameterExample입니다.:
            value: '1993-08-23'
            summary: short optional summary1
            description: longer description
          이것은QueryParameterExample2입니다.:
            value: '1993-08-23'
            summary: short optional summary2
            description: longer description
          이것은QueryParameterExample3입니다.:
            value: '1993-08-23'
            summary: short optional summary3
            description: longer description
      tags:
      - 사용자
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              SuccessExample:
                value:
                  username: root
                  password: django_1234
                  first_name: 성렬
                  last_name: 김
                  email: users@example.com
                summary: success_example
              InvalidExample1:
                value:
                  username: root23
                  password: '1234'
                  first_name: 성렬
                  last_name: 김
                  email: users@example.com
                summary: 비밀번호 너무 쉬움 예제
              InvalidExample2:
                value:
                  username: root434
                  password: django_1234
                  first_name: 성렬
                  last_name: 김
                  email: users@example.com
                summary: 이름 필수 입력 예제
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                SuccessExample:
                  value:
                    username: root
                    password: django_1234
                    first_name: 성렬
                    last_name: 김
                    email: users@example.com
                  summary: success_example
                SuccessExample2:
                  value:
                    username: root434
                    password: django_1234
                    first_name: 성렬
                    last_name: 김
                    email: users@example.com
                  summary: success_example2
          description: ''
  /api/users/{id}/:
    get:
      operationId: apiUsersRetrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shopping mall users.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: apiUsersUpdate
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shopping mall users.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: apiUsersPartialUpdate
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shopping mall users.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: apiUsersDestroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shopping mall users.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/users/custom-action-api/:
    get:
      operationId: apiUsersCustomActionApiRetrieve
      description: ''
      summary: '@action API도 마찬가지로 class 데코레이터로 문서 커스터마이징 가능하다.'
      tags:
      - 사용자
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
  /drf-fbv/:
    get:
      operationId: drfFbvRetrieve
      description: ''
      tags:
      - drf-fbv
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: drfFbvCreate
      description: ''
      tags:
      - drf-fbv
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /study-example-app/cbv-drf/:
    get:
      operationId: studyExampleAppCbvDrfRetrieve
      description: ''
      tags:
      - study-example-app
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: studyExampleAppCbvDrfCreate
      description: ''
      tags:
      - study-example-app
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /study-example-app/fbv-drf/:
    get:
      operationId: studyExampleAppFbvDrfRetrieve
      description: ''
      tags:
      - study-example-app
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: studyExampleAppFbvDrfCreate
      description: ''
      tags:
      - study-example-app
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    CustomUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_type:
          type: string
          default: customer
          description: 회원의 유형값을 받습니다.
        password:
          type: string
          title: 비밀번호
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: 마지막 로그인
        is_superuser:
          type: boolean
          title: 최상위 사용자 권한
          description: 해당 사용자에게 모든 권한을 허가합니다.
        username:
          type: string
          title: 사용자 이름
          description: 150자 이하 문자, 숫자 그리고 @/./+/-/_만 가능합니다.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: 이름
          maxLength: 150
        last_name:
          type: string
          title: 성
          maxLength: 150
        email:
          type: string
          format: email
          title: 이메일 주소
          maxLength: 254
        is_staff:
          type: boolean
          title: 스태프 권한
          description: 사용자가 관리사이트에 로그인이 가능한지를 나타냅니다.
        is_active:
          type: boolean
          title: 활성
          description: 이 사용자가 활성화되어 있는지를 나타냅니다. 계정을 삭제하는 대신 이것을 선택 해제하세요.
        date_joined:
          type: string
          format: date-time
          title: 등록일
        groups:
          type: array
          items:
            type: integer
            title: 그룹
          title: 그룹
          description: 이 사용자가 속한 그룹. 사용자는 그룹에 부여된 모든 권한을 물려 받습니다.
        user_permissions:
          type: array
          items:
            type: integer
            title: 사용자 권한
          title: 사용자 권한
          description: 이 사용자를 위한 특정 권한.
      required:
      - id
      - password
      - username
    Django2Model:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        a_field:
          type: string
          description: sdfsdf
        str_choices_field:
          $ref: '#/components/schemas/StrFieldEnum'
        text_choices_field:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StrFieldEnum'
          - $ref: '#/components/schemas/NullEnum'
        str_field:
          description: 주석을 대체하는 Argument다. DB에 영향을 전혀 주지않는다.
          oneOf:
          - $ref: '#/components/schemas/StrFieldEnum'
          - $ref: '#/components/schemas/BlankEnum'
        text_field:
          type: string
        int_field:
          allOf:
          - $ref: '#/components/schemas/IntFieldEnum'
          description: 주석을 대체하는 Argument다. DB에 영향을 전혀 주지않는다.
        float_field:
          type: number
          format: float
        decimal_field:
          type: string
          format: decimal
          pattern: ^\d{0,3}(\.\d{0,2})?$
          description: 5(max_digits)개의 자릿수를 저장하고 소숫점2(decimal_places)번째까지 저장 (999.00
            ~ 000.00)
        bool_field:
          type: boolean
          description: 'True False 뿐만 아니라 문자열 ''t'' ''1''을 True로 인식하고 ''f'',''0''을
            False로 인식한다. '
        date_field:
          type: string
          format: date
          description: auto_now가 True이면 해당 모델이 .save()될때 마다 최신날짜로 값을 자동으로 갱신해준다.auto_now_add가  True이면
            해당모델이 .create()되는 최초1회만 날짜값을 최신날짜를 채워준다.이런 옵션들은 주로 생성날짜, 최근수정날짜를 로깅할때
            사용한다.
        datetime_field:
          type: string
          format: date-time
        time_field:
          type: string
          format: time
        duration_field:
          type: string
          description: python의 timedelta(days=3)를 저장할 수 있다.
        file_field:
          type: string
          format: uri
      required:
      - a_field
      - bool_field
      - date_field
      - datetime_field
      - decimal_field
      - duration_field
      - file_field
      - float_field
      - id
    IntFieldEnum:
      enum:
      - 1
      - 2
      - 3
      type: integer
    Nested:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: 이름
          maxLength: 150
        permissions:
          type: array
          items:
            type: integer
            title: 허가
          title: 허가
      required:
      - id
      - name
    NullEnum:
      enum:
      - null
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          title: 비밀번호
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: 마지막 로그인
        is_superuser:
          type: boolean
          title: 최상위 사용자 권한
          description: 해당 사용자에게 모든 권한을 허가합니다.
        username:
          type: string
          title: 사용자 이름
          description: 150자 이하 문자, 숫자 그리고 @/./+/-/_만 가능합니다.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: 이름
          maxLength: 150
        last_name:
          type: string
          title: 성
          maxLength: 150
        email:
          type: string
          format: email
          title: 이메일 주소
          maxLength: 254
        is_staff:
          type: boolean
          title: 스태프 권한
          description: 사용자가 관리사이트에 로그인이 가능한지를 나타냅니다.
        is_active:
          type: boolean
          title: 활성
          description: 이 사용자가 활성화되어 있는지를 나타냅니다. 계정을 삭제하는 대신 이것을 선택 해제하세요.
        date_joined:
          type: string
          format: date-time
          title: 등록일
        user_type:
          allOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          description: 회원 유형
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        user_permissions:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
    StrFieldEnum:
      enum:
      - aaa
      - bb
      type: string
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          title: 비밀번호
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: 마지막 로그인
        is_superuser:
          type: boolean
          title: 최상위 사용자 권한
          description: 해당 사용자에게 모든 권한을 허가합니다.
        username:
          type: string
          title: 사용자 이름
          description: 150자 이하 문자, 숫자 그리고 @/./+/-/_만 가능합니다.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: 이름
          maxLength: 150
        last_name:
          type: string
          title: 성
          maxLength: 150
        email:
          type: string
          format: email
          title: 이메일 주소
          maxLength: 254
        is_staff:
          type: boolean
          title: 스태프 권한
          description: 사용자가 관리사이트에 로그인이 가능한지를 나타냅니다.
        is_active:
          type: boolean
          title: 활성
          description: 이 사용자가 활성화되어 있는지를 나타냅니다. 계정을 삭제하는 대신 이것을 선택 해제하세요.
        date_joined:
          type: string
          format: date-time
          title: 등록일
        user_type:
          allOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          description: 회원 유형
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        user_permissions:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - groups
      - id
      - password
      - user_permissions
      - username
    UserTypeEnum:
      enum:
      - customer
      - store_owner
      type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: Session
